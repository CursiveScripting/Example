{"version":3,"sources":["IntegerWorkspace.ts","App.tsx","index.tsx"],"names":["IntegerWorkspace","add","subtract","multiply","compare","modifyNumber","integer","FixedType","s","parseInt","undefined","RegExp","input1","TypedParameter","input2","output","SystemProcess","inputs","value1","get","value2","outputs","ValueSet","set","Promise","resolve","returnPath","in1","in2","a","run","this","result","input","RequiredProcess","start","types","systemProcesses","requiredProcesses","Workspace","processSessionKey","workspace","customTools","prompt","iconBackground","unsavedConfirmation","action","loadProcesses","processJson","sessionStorage","getItem","processData","initialProcess","JSON","parse","loadUserProcesses","saveProcesses","stringify","setItem","window","number","alert","ReactDOM","render","className","loadWorkspace","saveWorkspace","document","getElementById"],"mappings":"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","file":"static/js/main.dcdc3ae5.chunk.js","sourcesContent":["import { Workspace, FixedType, SystemProcess, TypedParameter, ValueSet, RequiredProcess } from 'cursive-runtime';\r\n\r\nexport class IntegerWorkspace extends Workspace {\r\n  constructor() {\r\n    super();\r\n    const integer = new FixedType<number>(\r\n      'integer',\r\n      '#00cc00',\r\n      s => parseInt(s),\r\n      undefined,\r\n      undefined,\r\n      new RegExp('^[0-9]+$'),\r\n    );\r\n\r\n    let add: SystemProcess;\r\n\r\n    {\r\n      const input1 = new TypedParameter<number>('value 1', integer);\r\n      const input2 = new TypedParameter<number>('value 2', integer);\r\n\r\n      const output = new TypedParameter<number>('result', integer);\r\n\r\n      add = new SystemProcess(\r\n        'Add',\r\n        'Adds two integers',\r\n        null,\r\n        inputs => {\r\n          const value1 = inputs.get(input1);\r\n          const value2 = inputs.get(input2);\r\n\r\n          const outputs = new ValueSet();\r\n          outputs.set(output, value1 + value2);\r\n\r\n          return Promise.resolve({\r\n            returnPath: null,\r\n            outputs,\r\n          });\r\n        },\r\n        [input1, input2],\r\n        [output],\r\n        [],\r\n      );\r\n\r\n      this.add = async (in1, in2) => {\r\n        const inputs = new ValueSet();\r\n\r\n        inputs.set(input1, in1);\r\n        inputs.set(input2, in2);\r\n\r\n        const { outputs } = await add.run(inputs);\r\n\r\n        return Promise.resolve(outputs!.get(output));\r\n      };\r\n    }\r\n\r\n    let subtract: SystemProcess;\r\n\r\n    {\r\n      const input1 = new TypedParameter<number>('value 1', integer);\r\n      const input2 = new TypedParameter<number>('value 2', integer);\r\n\r\n      const output = new TypedParameter<number>('result', integer);\r\n\r\n      subtract = new SystemProcess(\r\n        'Subtract',\r\n        'Subtracts one integer from another',\r\n        null,\r\n        inputs => {\r\n          const value1 = inputs.get(input1);\r\n          const value2 = inputs.get(input2);\r\n\r\n          const outputs = new ValueSet();\r\n          outputs.set(output, value1 - value2);\r\n\r\n          return Promise.resolve({\r\n            returnPath: null,\r\n            outputs,\r\n          });\r\n        },\r\n        [input1, input2],\r\n        [output],\r\n        [],\r\n      );\r\n\r\n      this.subtract = async (in1, in2) => {\r\n        const inputs = new ValueSet();\r\n\r\n        inputs.set(input1, in1);\r\n        inputs.set(input2, in2);\r\n\r\n        const { outputs } = await subtract.run(inputs);\r\n\r\n        return Promise.resolve(outputs!.get(output));\r\n      };\r\n    }\r\n\r\n    let multiply: SystemProcess;\r\n\r\n    {\r\n      const input1 = new TypedParameter<number>('value 1', integer);\r\n      const input2 = new TypedParameter<number>('value 2', integer);\r\n\r\n      const output = new TypedParameter<number>('result', integer);\r\n\r\n      multiply = new SystemProcess(\r\n        'Multiply',\r\n        'Multiplies two integers',\r\n        null,\r\n        inputs => {\r\n          const value1 = inputs.get(input1);\r\n          const value2 = inputs.get(input2);\r\n\r\n          const outputs = new ValueSet();\r\n          outputs.set(output, value1 * value2);\r\n\r\n          return Promise.resolve({\r\n            returnPath: null,\r\n            outputs,\r\n          });\r\n        },\r\n        [input1, input2],\r\n        [output],\r\n        [],\r\n      );\r\n\r\n      this.multiply = async (in1, in2) => {\r\n        const inputs = new ValueSet();\r\n\r\n        inputs.set(input1, in1);\r\n        inputs.set(input2, in2);\r\n\r\n        const { outputs } = await multiply.run(inputs);\r\n\r\n        return Promise.resolve(outputs!.get(output));\r\n      };\r\n    }\r\n\r\n    let compare: SystemProcess;\r\n\r\n    {\r\n      const input1 = new TypedParameter<number>('value 1', integer);\r\n      const input2 = new TypedParameter<number>('value 2', integer);\r\n\r\n      compare = new SystemProcess(\r\n        'Compare',\r\n        'Compare two integers',\r\n        null,\r\n        inputs => {\r\n          const value1 = inputs.get(input1);\r\n          const value2 = inputs.get(input2);\r\n\r\n          const result = value1 < value2 ? 'less' : value1 > value2 ? 'greater' : 'equal';\r\n\r\n          return Promise.resolve({\r\n            returnPath: result,\r\n            outputs: null,\r\n          });\r\n        },\r\n        [input1, input2],\r\n        [],\r\n        ['less', 'greater', 'equal'],\r\n      );\r\n\r\n      this.compare = async (in1, in2) => {\r\n        const inputs = new ValueSet();\r\n\r\n        inputs.set(input1, in1);\r\n        inputs.set(input2, in2);\r\n\r\n        const { returnPath } = await compare.run(inputs);\r\n\r\n        return Promise.resolve(returnPath as 'less' | 'greater' | 'equal');\r\n      };\r\n    }\r\n\r\n    let modifyNumber: RequiredProcess;\r\n\r\n    {\r\n      const input = new TypedParameter<number>('value', integer);\r\n      const output = new TypedParameter<number>('result', integer);\r\n\r\n      modifyNumber = new RequiredProcess(\r\n        'Modify number',\r\n        'Perform some operation(s) on a number',\r\n        null,\r\n        [input],\r\n        [output],\r\n        [],\r\n      );\r\n\r\n      this.modifyNumber = async in1 => {\r\n        const inputs = new ValueSet();\r\n\r\n        inputs.set(input, in1);\r\n\r\n        const { outputs } = await modifyNumber.start(inputs);\r\n\r\n        return Promise.resolve(outputs!.get(output));\r\n      };\r\n    }\r\n\r\n    this.types = [integer];\r\n    this.systemProcesses = [add, subtract, multiply, compare];\r\n    this.requiredProcesses = [modifyNumber];\r\n  }\r\n\r\n  public add: (in1: number, in2: number) => Promise<number>;\r\n  public subtract: (in1: number, in2: number) => Promise<number>;\r\n  public multiply: (in1: number, in2: number) => Promise<number>;\r\n  public compare: (in1: number, in2: number) => Promise<'less' | 'greater' | 'equal'>;\r\n  public modifyNumber: (in1: number) => Promise<number>;\r\n}\r\n","import * as React from 'react';\r\nimport './App.css';\r\nimport CursiveUI, { ICustomTool, IUserProcessData } from 'cursive-ui';\r\nimport { IntegerWorkspace } from './IntegerWorkspace';\r\nimport initialProcess from './initialProcess.json';\r\n\r\nconst processSessionKey = 'saved';\r\n\r\nconst workspace = new IntegerWorkspace();\r\n\r\nconst customTools: ICustomTool[] = [{\r\n    prompt: 'Run Process',\r\n    iconBackground: `url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='feather feather-play'><polygon points='5 3 19 12 5 21 5 3'></polygon></svg>\")`,\r\n    unsavedConfirmation: 'You have unsaved changes. Run last saved version?',\r\n    action: runProcess,\r\n}];\r\n\r\nexport const App = () => (\r\n    <CursiveUI\r\n        className=\"fullScreen\"\r\n        loadWorkspace={async () => workspace.saveWorkspace()}\r\n        loadProcesses={loadProcesses}\r\n        saveProcesses={saveProcesses}\r\n        customTools={customTools}\r\n    />\r\n);\r\n\r\nasync function loadProcesses() {\r\n    let processJson = sessionStorage.getItem(processSessionKey);\r\n    \r\n    const processData = processJson === null\r\n        ? initialProcess as IUserProcessData[]\r\n        : JSON.parse(processJson) as IUserProcessData[];\r\n      \r\n    const errors = workspace.loadUserProcesses(processData, true)\r\n    \r\n    return processData;\r\n}\r\n\r\nasync function saveProcesses(processData: IUserProcessData[]) {\r\n    const processJson = JSON.stringify(processData);\r\n\r\n    sessionStorage.setItem(processSessionKey, processJson);\r\n\r\n    workspace.loadUserProcesses(processData, true);\r\n}\r\n\r\nasync function runProcess() {\r\n    const input = window.prompt('Provide an input number', '1');\r\n\r\n    if (input === null) {\r\n        return;\r\n    }\r\n\r\n    const number = parseInt(input);\r\n    \r\n    const result = await workspace.modifyNumber(number);\r\n\r\n    alert(`Process complete! Result: ${result}`);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}